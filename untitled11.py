# -*- coding: utf-8 -*-
"""Untitled11.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HgkQzuoRW_VCun6mmAQ2_g2h-jNuiNBN
"""

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler

# Load the dataset
train_data = pd.read_csv('/content/DSAILVA-TRAIN Data - Wheat.csv')  # Replace with your file path

# Selecting only the necessary columns
X = train_data[['Length of kernel', 'Width of kernel']]

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

wcss = []  # Within-cluster sum of squares
for i in range(1, 11):
    kmeans = KMeans(n_clusters=i, init='k-means++', random_state=42)
    kmeans.fit(X_scaled)
    wcss.append(kmeans.inertia_)

# Plotting the Elbow Method graph
plt.figure(figsize=(10,6))
plt.plot(range(1, 11), wcss, marker='o', linestyle='--')
plt.title('Elbow Method')
plt.xlabel('Number of clusters')
plt.ylabel('WCSS')
plt.show()

k = 4  # Replace with the number of clusters you determined
kmeans = KMeans(n_clusters=k, init='k-means++', random_state=42)
clusters = kmeans.fit_predict(X_scaled)

# Add cluster info to the DataFrame
train_data['Cluster'] = clusters

plt.figure(figsize=(12,8))
for cluster in range(k):
    plt.scatter(train_data[train_data['Cluster'] == cluster]['Length of kernel'],
                train_data[train_data['Cluster'] == cluster]['Width of kernel'],
                label=f'Cluster {cluster}')
plt.title('Clusters of Wheat Varieties')
plt.xlabel('Length of Kernel')
plt.ylabel('Width of Kernel')
plt.legend()
plt.show()